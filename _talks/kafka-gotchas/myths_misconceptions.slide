Kafka Gotchas and Misconceptions
05 March 2022

Dineshkumar
Senior Software Engineer @ elastic

https://twitter.com/devdineshkumar



* Kafka Gotchas & Misconception

* Scalability / Partitions
*Gotcha*:  You can keep increasing partitions to deal with lag

- Each partition assigned consumer instance/thread, which needs more system resources
- file descriptor limits 
- If you're pushing to database, you may run out of connections (maxconns)

* Concurrent db updates

- If you're dealing with updates of DB records,

    INSERT INTO orders (id, name, last_update)
    VALUES (?, ?, ?) 
    on conflict (id) DO
        update set last_update = now()

- lock, upsert, unlock
- could cause lock contention leading to deadlocks in db

* Custom Partitioning
- *Gotcha*: You can leverage custom partitioning for ordering (partitioned at publisher end)

- The data will not be evenly distributed across all partitions

.image ./img/overloaded_partition.png

- You can't scale partition 3 consumers anymore

* Mirror maker partitioning
On similar lines if you're using mirror maker ensure you've right partitioning configuration


* Misconceptions

* Ordering in Kafka
- *Misconception*: Since kafka ensures ordering in partition, assuming you can acheive ordering in distributed-systems
.image ./img/ordering.png

* Duplicate messages
- *Misconception* - You don't need handle duplicates

.image ./img/duplicate_message_network_failure.png

- can be caused by n/w failure
- similar to the last case, can be caused by a retry worker anywhere in the pipeline



* Guidelines

* References

.link https://programmer.ink/think/kafka-idempotent-implementation-of-kafka-transactional.html Idempotent Implementation of kafka

* About
.link https://github.com/devdinu github
.link https://twitter.com/devdineshkumar twitter
